library(tidyverse)

library(mosaic)

library(class)

library(FNN)

data(brca)

# glm_c_error is the function that 

glm_C_error = function(fo, data, Family = binomial, threshold = 0.5, Ntimes = 50){
  
  n = nrow(data)
  
  # performance check
  
  rmse_vals = do(Ntimes)*{
    
    # re-split into train and test cases
    
    n_train = round(0.8*n)  # round to nearest integer
    
    n_test = n - n_train
    
    train_cases = sample.int(n, n_train, replace=FALSE)
    
    test_cases = setdiff(1:n, train_cases)
    
    DF_train = data[train_cases,]
    
    DF_test = data[test_cases,]
    
    
    
    # fit to this training set
    
    glm_result = glm(fo, data=DF_train, family=Family)
    
    
    
    # predict on this testing set
    
    phat_test = predict(glm_result, DF_test, type='response')
    
    yhat_test = ifelse(phat_test > threshold, 1, 0)
    
    sum(yhat_test != unlist(DF_test[as.character(fo[[2]])]))/n_test 
    
  }
  
  colMeans(rmse_vals)
  
}



# This is the model that has the lowest error during the dozens of models we tried.

glm_C_error(recall~radiologist*(age+history+symptoms+menopause),data=brca,Ntimes=100)

# name it model

model=glm(recall~radiologist*(age+history+symptoms+menopause),data=brca)

summary(model)


n = nrow(brca)

pretest_cases = sample.int(n,50,replace=FALSE)

brca_pretest = brca[pretest_cases,]

brca_sample=data.frame(brca_pretest)

brca_samplerepeat=brca_sample[rep(1:nrow(brca_sample),each=5),-1]

brca_samplerepeat$radiologist=c("radiologist13","radiologist34","radiologist66","radiologist89","radiologist95")

brca_samplerepeat



yhat_recall = predict(modelselect, brca_samplerepeat)

yhat_recall



brca_samplerepeat=cbind(brca_samplerepeat,yhat_recall)



brca_predict<-brca_samplerepeat%>%
  
  group_by(radiologist)%>%
  
  summarise(Prob_recall = mean(yhat_recall))

brca_predict


ml1 = multinom(cancer ~ recall, data=brca, maxit=1000)

ml2 = multinom(cancer ~ recall + history + symptoms, data=brca, maxit=1000)

ml3 = multinom(cancer ~ (.)^2, data=brca, maxit=1000)

summary(ml1)

summary(ml2)

summary(ml3)

probhat2_train = predict(ml2, newdata=fgl_train, type='probs')

deviance(ml1)
deviance(ml2)
deviance(ml3)

